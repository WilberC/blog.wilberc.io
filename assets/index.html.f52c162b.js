import{_ as n,o as a,c as s,a as t}from"./app.28880129.js";const p={},e=t(`<h1 id="creating-the-api-management" tabindex="-1"><a class="header-anchor" href="#creating-the-api-management" aria-hidden="true">#</a> Creating the API Management</h1><p>Well to create the APIM is really quick as in all cloud services, so I prefer you to continue with the <a href="https://learn.microsoft.com/en-us/azure/api-management/get-started-create-service-instance" target="_blank" rel="noopener noreferrer">official doc</a>, for that reason we will start here: <br></p><p><img src="https://github.com/WilberC/blog.wilberc.io/assets/27011395/0b94555b-5f39-456d-a881-e6a63d26be82" alt="APIM-Home-Screen"></p><h2 id="setting-up-the-api-endpoint" tabindex="-1"><a class="header-anchor" href="#setting-up-the-api-endpoint" aria-hidden="true">#</a> Setting up the API Endpoint</h2><p>Let&#39;s modify the <code>Echo API</code> endpoints.</p><p><img src="https://github.com/WilberC/blog.wilberc.io/assets/27011395/a5385ecb-b29f-4bf2-a777-20f80366dd53" alt="API-Operations"></p><h2 id="policies-base-structure" tabindex="-1"><a class="header-anchor" href="#policies-base-structure" aria-hidden="true">#</a> Policies base structure</h2><p>This is the base structure of a police in where we have the <code>Inbound</code> -&gt; <code>Backend</code> -&gt; <code>Output</code> and at the end <code>Error</code>. Let&#39;s explain what each part is in charge of:</p><ul><li><code>policies</code>:</li><li><code>inbound</code>: This section contains policies that are applied to incoming requests before they reach the backend service.</li><li><code>backend</code>: This section contains policies that are applied to requests before they are sent to the backend service.</li><li><code>outbound</code>: This section contains policies that are applied to responses before they are sent back to the client.</li><li><code>on-error</code>: This section contains policies that are applied to responses before they are sent back to the client.</li><li><code>base</code>: This is a reference to default policies at the corresponding policy tag.</li></ul><div class="language-xml ext-xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inbound</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inbound</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>backend</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>backend</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outbound</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outbound</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>on-error</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>on-error</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policies</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><hr><h3 id="making-our-policy" tabindex="-1"><a class="header-anchor" href="#making-our-policy" aria-hidden="true">#</a> Making our Policy</h3><ul><li>Now Knowing the XML structure of a policy now we can start doing ours own custom policy. So let&#39;s <code>get the fingerprint of a cert file every we have a request</code></li></ul><h4 id="v1" tabindex="-1"><a class="header-anchor" href="#v1" aria-hidden="true">#</a> V1</h4><ul><li>Here&#39;s a simple custom policy that get fingerprint and returns it into the header in case the request is Ok, but also in Error</li></ul><div class="language-xml ext-xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policies</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- As we know the first step is to intercept the request inbound for this case --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inbound</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- We get the fingerprint value and set to receivedFingerprint variable --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>receivedFingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@(context.Request.Certificate?.Thumbprint)<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inbound</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>backend</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- We don&#39;t do anything at the backend for this case. So let it work as expected --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>backend</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outbound</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Let&#39;s return the fingerprint we get into the headers as Received-Fingerprint --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- Here we&#39;re getting the value of the variable we defined in the inbound step --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>@((string)context.Variables[&quot;receivedFingerprint&quot;])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outbound</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>on-error</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- We&#39;re going to return the fingerprint in the error header too, because it can be helpful, but you can omit it if you want--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>@((string)context.Variables[&quot;receivedFingerprint&quot;])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>on-error</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policies</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h4 id="v2" tabindex="-1"><a class="header-anchor" href="#v2" aria-hidden="true">#</a> V2</h4><ul><li>Now let&#39;s modify the policy a little to give us more information at the response</li></ul><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inbound</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>receivedFingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@(context.Request.Certificate?.Thumbprint)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inbound</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>backend</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>backend</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outbound</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Here starts our conditional so the idea is to return fingerprint if it&#39;s present otherwise set default value --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>
            &lt;when condition=&quot;@(context.Variables[&quot;receivedFingerprint&quot;] != null)&quot;&gt;
                <span class="token comment">&lt;!-- If &quot;receivedFingerprint&quot; variable is found and not null, set the header with its value --&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>@((string)context.Variables[&quot;receivedFingerprint&quot;])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>
                <span class="token comment">&lt;!-- If &quot;receivedFingerprint&quot; variable is not found or null, set a default value --&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>finger-print-not-found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outbound</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>on-error</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Same idea as the outbound, but in error case --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>
            &lt;when condition=&quot;@(context.Variables[&quot;receivedFingerprint&quot;] != null)&quot;&gt;
                <span class="token comment">&lt;!-- If &quot;receivedFingerprint&quot; variable is found and not null, set the header with its value --&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>@((string)context.Variables[&quot;receivedFingerprint&quot;])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>
                <span class="token comment">&lt;!-- If &quot;receivedFingerprint&quot; variable is not found or null, set a default value --&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>finger-print-not-found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>on-error</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policies</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h4 id="v3" tabindex="-1"><a class="header-anchor" href="#v3" aria-hidden="true">#</a> V3</h4><ul><li>For this third version let&#39;s make a little more interesting and let&#39;s add the possible to validate if the fingerprint user is sending a fingerprint that is registered at the policy and also give more context responding a JSON at the body too</li></ul><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>policies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>inbound</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Fingerprint sent by user&#39;s request--&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>receivedFingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@(context.Request.Certificate?.Thumbprint)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Declare a list of strings where each value is a fingerprint value --&gt;</span>
        <span class="token comment">&lt;!-- Remember that when saving the XML at APIM encode it&#39;s base to html that&#39;s why &amp;apos; is valid --&gt;</span>
        <span class="token comment">&lt;!-- and many times this type of declaration will save our lives --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>allowedFingerprints<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[<span class="token entity named-entity" title="&#39;">&amp;apos;</span>2C44ADA1234BB1EC62C8B204E95A5aAA3414674CC<span class="token entity named-entity" title="&#39;">&amp;apos;</span>,<span class="token entity named-entity" title="&#39;">&amp;apos;</span>2<span class="token entity named-entity" title="&#39;">&amp;apos;</span>]<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- First we validate that fingerprint is sent and if not, simple return the error. --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">condition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@(string.IsNullOrEmpty(context.Variables[<span class="token punctuation">&quot;</span></span><span class="token attr-name">receivedFingerprint&quot;]</span> <span class="token attr-name">as</span> <span class="token attr-name">string))&quot;</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>return-response</span><span class="token punctuation">&gt;</span></span>
                    <span class="token comment">&lt;!-- We return 400 http status code with the corresponding header that fingerprint is not sent --&gt;</span>
                    <span class="token comment">&lt;!-- but also at the JSON we return a message --&gt;</span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-status</span> <span class="token attr-name">code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>400<span class="token punctuation">&quot;</span></span> <span class="token attr-name">reason</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Bad Request<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>finger-print-not-found<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-body</span><span class="token punctuation">&gt;</span></span>@(&quot;{\\&quot;error\\&quot;: \\&quot;Fingerprint is missing\\&quot;}&quot;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-body</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>return-response</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- This is hard to understand, so we will see at detail then. For now just keep in mind that if this --&gt;</span>
            <span class="token comment">&lt;!-- condition is true it will continue to backend and then outbound or on-error and response will be --&gt;</span>
            <span class="token comment">&lt;!-- handle at the corresponding xml tag logic --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">condition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@(((List&lt;string&gt;)JsonConvert.DeserializeObject&lt;List&lt;string&gt;&gt;((string)context.Variables[<span class="token punctuation">&quot;</span></span><span class="token attr-name">allowedFingerprints&quot;])).Contains(context.Variables[&quot;receivedFingerprint&quot;]))&quot;</span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>return-response</span><span class="token punctuation">&gt;</span></span>
                  <span class="token comment">&lt;!-- We return 401 http status code with the corresponding header that fingerprint is sent, but --&gt;</span>
                  <span class="token comment">&lt;!-- it is not allowed because it&#39;s not present at the allowedFingerprints list --&gt;</span>
                  <span class="token comment">&lt;!-- and also at the JSON we return a message --&gt;</span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-status</span> <span class="token attr-name">code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>401<span class="token punctuation">&quot;</span></span> <span class="token attr-name">reason</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Unauthorized<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>@((string)context.Variables[&quot;receivedFingerprint&quot;])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-body</span><span class="token punctuation">&gt;</span></span>@(&quot;{\\&quot;error\\&quot;: \\&quot;Fingerprint not allowed\\&quot;}&quot;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-body</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>return-response</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>inbound</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>backend</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>backend</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outbound</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token punctuation">/&gt;</span></span>
        <span class="token comment">&lt;!-- Simple adds the header with the fingerprint value and then continues at normal flow --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>@((string)context.Variables[&quot;receivedFingerprint&quot;])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outbound</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>on-error</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>return-response</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- In case of any error returns 500 http status code, but also returns the fingerprint sent --&gt;</span>
            <span class="token comment">&lt;!-- at the header and also returns a JSON at the body with the detailed error message --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-status</span> <span class="token attr-name">code</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>500<span class="token punctuation">&quot;</span></span> <span class="token attr-name">reason</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Internal Server Error<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-header</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Received-Fingerprint<span class="token punctuation">&quot;</span></span> <span class="token attr-name">exists-action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>override<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>@((string)context.Variables[&quot;receivedFingerprint&quot;])<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-header</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set-body</span><span class="token punctuation">&gt;</span></span>@($&quot;{{\\&quot;error\\&quot;: \\&quot;An unexpected error occurred. Details: {context.LastError.Message}\\&quot;}}&quot;)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set-body</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>return-response</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>on-error</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>policies</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><ul><li>Breaking down the main condition of the policy, for this the first to know it&#39;s that any operation the is part of programing language (C# for this case) has to be enclosure by <code>@()</code> so we will have something like this:</li></ul><div class="language-xml ext-xml"><pre class="language-xml"><code>((List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>)JsonConvert.DeserializeObject&lt;List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">&gt;</span></span>&gt;((string)context.Variables[&quot;allowedFingerprints&quot;])).Contains(context.Variables[&quot;receivedFingerprint&quot;])
</code></pre></div><ul><li>Now with this let&#39;s digest each part:</li></ul><ol><li>Variable Type Casting:<div class="language-csharp ext-cs"><pre class="language-csharp"><code><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
</code></pre></div>This part casts the result of the <code>JsonConvert.DeserializeObject</code> method to a <code>List&lt;string&gt;</code>. The <code>DeserializeObject</code> method converts a JSON string into an object of the specified type, and in this case, it&#39;s being cast to a list of strings.</li><li>Deserialization from JSON:<div class="language-csharp ext-cs"><pre class="language-csharp"><code>JsonConvert<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">DeserializeObject</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>List<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre></div>This part deserializes a JSON string into a list of strings. The <code>JsonConvert.DeserializeObject</code> method is from the <code>Json.NET</code> library and is used to convert <code>JSON-formatted</code> data into a <code>.NET object</code>. In this case, it&#39;s expecting a JSON string representing a list of strings.</li><li>Accessing a Value from a Dictionary:<div class="language-csharp ext-cs"><pre class="language-csharp"><code><span class="token punctuation">(</span><span class="token keyword">string</span><span class="token punctuation">)</span>context<span class="token punctuation">.</span>Variables<span class="token punctuation">[</span><span class="token string">&quot;allowedFingerprints&quot;</span><span class="token punctuation">]</span>
</code></pre></div>This part accesses a value from a dictionary named <code>Variables</code> stored within an object named context. It retrieves the value associated with the key <code>&quot;allowedFingerprints&quot;</code> and casts it to a string.</li><li>Checking for String Existence in List:<div class="language-csharp ext-cs"><pre class="language-csharp"><code><span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Variables<span class="token punctuation">[</span><span class="token string">&quot;receivedFingerprint&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div>This part checks if the list obtained from deserialization contains a specific string. It uses the <code>Contains method</code> to check if the string value stored in <code>context.Variables[&quot;receivedFingerprint&quot;]</code> is present in the list obtained earlier.</li></ol><ul><li>In summary, this line of code deserializes a JSON string stored in the variable <code>allowedFingerprints</code> into a list of strings, then checks if <code>receivedFingerprint</code> exists in that list.</li></ul><hr><p>Now with this simple example we can extrapolate and create a lot of different APIM customs policies, for more context and functions you can go to this <a href="https://learn.microsoft.com/en-us/azure/api-management/api-management-policies" target="_blank" rel="noopener noreferrer">doc</a>. Thanks for reading and see you soon :3</p>`,29),o=[e];function c(l,u){return a(),s("div",null,o)}var k=n(p,[["render",c],["__file","index.html.vue"]]);export{k as default};
